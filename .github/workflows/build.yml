name: Build Executables

on:
  push:
    branches:
      - master  # Updated branch name

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'  # Specify your Python version

      - name: Install dependencies
        run: |
          pip install pyinstaller Pillow  # Add other dependencies as needed

      - name: Install system dependencies for Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y fuse appstream  # Install FUSE and AppStream CLI for metadata support

      - name: Build executable for Windows
        if: matrix.os == 'windows-latest'
        run: |
          pyinstaller --onefile --add-data "forest-dark:forest-dark" --add-data "compare.png:." --add-data "forest-dark.tcl:." ipsw_firmware_tool.py

      - name: Build AppImage for Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          pyinstaller --onefile --add-data "forest-dark:forest-dark" --add-data "compare.png:." --add-data "forest-dark.tcl:." ipsw_firmware_tool.py
          
          # Download and prepare appimagetool
          wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage
          
          mkdir -p ./output  # Create output directory if it doesn't exist
          
          # Check if the expected AppImage was created in dist/
          if [ -f dist/ipsw_firmware_tool ]; then
              ./appimagetool-x86_64.AppImage dist/ipsw_firmware_tool ./output/ipsw_firmware_tool.AppImage || { echo "AppImage creation failed"; exit 1; }
          else
              echo "Error: Expected AppImage not found in dist/"
              exit 1
          fi

      - name: Upload AppImage as artifact
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v3
        with:
          name: ipsw_firmware_tool_appimage
          path: ./output/ipsw_firmware_tool.AppImage
